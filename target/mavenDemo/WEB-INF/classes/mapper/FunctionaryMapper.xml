<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zime.maven.dao.FunctionaryMapper">

  <resultMap id="BaseResultMap" type="com.zime.maven.entity.Functionary">
    <result column="Job_id" jdbcType="INTEGER" property="jobId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="position" jdbcType="VARCHAR" property="position" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="phone_num" jdbcType="VARCHAR" property="phoneNum" />
    <result column="birth" jdbcType="DATE" property="birth" />
    <result column="entry_time" jdbcType="DATE" property="entryTime" />
    <result column="department_id" jdbcType="INTEGER" property="departmentId" />
  </resultMap>
    <resultMap id="WithDepartmentResultMap" type="com.zime.maven.entity.Functionary">
    <result column="Job_id" jdbcType="INTEGER" property="jobId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="position" jdbcType="VARCHAR" property="position" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="phone_num" jdbcType="VARCHAR" property="phoneNum" />
    <result column="birth" jdbcType="DATE" property="birth" />
    <result column="entry_time" jdbcType="DATE" property="entryTime" />
    <result column="department_id" jdbcType="INTEGER" property="departmentId" />
    <association property="department" javaType="com.zime.maven.entity.department">
    	<id column="department_id" property="departmentId" />
    	<result column="department_name" property="departName"/>
    </association>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    Job_id, name, position, email, phone_num, birth, entry_time, department_id
  </sql>
  <sql id="WithDepartment_Column_List">
    f.Job_id, f.name, f.position, f.email, f.phone_num, f.birth, f.entry_time, f.department_id,d.`depart_name`
  </sql>
  <!--     List<Functionary> selectByExampleWithDepartment(FunctionaryExample example);

    Functionary selectByPrimaryKeyWithDepartment(Integer id); -->
    
  <select id="electByExampleWithDepartment" resultMap="WithDepartmentResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="WithDepartment_Column_List" />
    FROM functionary  f LEFT OUTER JOIN depart d ON f.`department_id`=d.`department_id`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    </select>
  <select id="selectByPrimaryKeyWithDepartment" resultMap="WithDepartmentResultMap">
     resultMap = "BaseResultMap"
  	 select
  	 <include refid="WithDepartment_Column_List" />
  	 FROM functionary  f LEFT OUTER JOIN depart d ON f.`department_id`=d.`department_id`
  	 where jobId = #{Job_id,jdbcType=INTECER}
    </select>
  <select id="selectByExample" parameterType="com.zime.maven.entity.FunctionaryExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from functionary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer">
  	 resultMap = "BaseResultMap"
  	 select
  	 <include refid="Base_Column_List" />
  	 from functionary
  	 where jobId = #{Job_id,jdbcType=INTECER}
  </select>
  <delete id="deleteByExample" parameterType="com.zime.maven.entity.FunctionaryExample">
    delete from functionary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zime.maven.entity.Functionary">
    insert into functionary (Job_id, name, position, 
      email, phone_num, birth, 
      entry_time, department_id)
    values (#{jobId,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{position,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{phoneNum,jdbcType=VARCHAR}, #{birth,jdbcType=DATE}, 
      #{entryTime,jdbcType=DATE}, #{departmentId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.zime.maven.entity.Functionary">
    insert into functionary
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="jobId != null">
        Job_id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="position != null">
        position,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="phoneNum != null">
        phone_num,
      </if>
      <if test="birth != null">
        birth,
      </if>
      <if test="entryTime != null">
        entry_time,
      </if>
      <if test="departmentId != null">
        department_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="jobId != null">
        #{jobId,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="position != null">
        #{position,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="phoneNum != null">
        #{phoneNum,jdbcType=VARCHAR},
      </if>
      <if test="birth != null">
        #{birth,jdbcType=DATE},
      </if>
      <if test="entryTime != null">
        #{entryTime,jdbcType=DATE},
      </if>
      <if test="departmentId != null">
        #{departmentId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zime.maven.entity.FunctionaryExample" resultType="java.lang.Long">
    select count(*) from functionary
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update functionary
    <set>
      <if test="record.jobId != null">
        Job_id = #{record.jobId,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.position != null">
        position = #{record.position,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.phoneNum != null">
        phone_num = #{record.phoneNum,jdbcType=VARCHAR},
      </if>
      <if test="record.birth != null">
        birth = #{record.birth,jdbcType=DATE},
      </if>
      <if test="record.entryTime != null">
        entry_time = #{record.entryTime,jdbcType=DATE},
      </if>
      <if test="record.departmentId != null">
        department_id = #{record.departmentId,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update functionary
    set Job_id = #{record.jobId,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      position = #{record.position,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      phone_num = #{record.phoneNum,jdbcType=VARCHAR},
      birth = #{record.birth,jdbcType=DATE},
      entry_time = #{record.entryTime,jdbcType=DATE},
      department_id = #{record.departmentId,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>

</mapper>